//   The contents of this file are subject to the Mozilla Public License
//   Version 1.1 (the "License"); you may not use this file except in
//   compliance with the License. You may obtain a copy of the License at
//   http://www.mozilla.org/MPL/
//
//   Software distributed under the License is distributed on an "AS IS"
//   basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
//   License for the specific language governing rights and limitations
//   under the License.
//
//   The Original Code is RabbitMQ.
//
//   The Initial Developers of the Original Code are LShift Ltd,
//   Cohesive Financial Technologies LLC, and Rabbit Technologies Ltd.
//
//   Portions created before 22-Nov-2008 00:00:00 GMT by LShift Ltd,
//   Cohesive Financial Technologies LLC, or Rabbit Technologies Ltd
//   are Copyright (C) 2007-2008 LShift Ltd, Cohesive Financial
//   Technologies LLC, and Rabbit Technologies Ltd.
//
//   Portions created by LShift Ltd are Copyright (C) 2007-2010 LShift
//   Ltd. Portions created by Cohesive Financial Technologies LLC are
//   Copyright (C) 2007-2010 Cohesive Financial Technologies
//   LLC. Portions created by Rabbit Technologies Ltd are Copyright
//   (C) 2007-2010 Rabbit Technologies Ltd.
//
//   All Rights Reserved.
//
//   Contributor(s): ______________________________________.
//

package com.rabbitmq.client.impl;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Map;

import com.rabbitmq.client.AMQP;
import com.rabbitmq.client.impl.AMQImpl.MethodVisitor;

/**
 * Base class for AMQP method objects, specialized by autogenerated
 * code in AMQP.java.
 */
public abstract class Method implements com.rabbitmq.client.Method {
    /** {@inheritDoc} */
    public abstract int protocolClassId(); /* properly an unsigned short */

    /** {@inheritDoc} */
    public abstract int protocolMethodId(); /* properly an unsigned short */

    /** {@inheritDoc} */
    public abstract String protocolMethodName();

    /**
     * Tell if content is present.
     * @return true if the wire-protocol for this method should involve a content header and body,
     * or false if it should just involve a single method frame.
     */
    public abstract boolean hasContent();

    /**
     * Visitor support (double-dispatch mechanism).
     * @param visitor the visitor object
     * @return the result of the "visit" operation
     * @throws IOException if an error is encountered
     */
    public abstract Object visit(MethodVisitor visitor) throws IOException;

    /**
     * Private API - Autogenerated reader for this method.
     * @param reader interface to an object to read the method arguments
     * @throws IOException if an error is encountered
     */
    public abstract void readArgumentsFrom(MethodArgumentReader reader) throws IOException;

    /**
     * Private API - Autogenerated writer for this method.
     * @param writer interface to an object to write the method arguments
     * @throws IOException if an error is encountered
     */
    public abstract void writeArgumentsTo(MethodArgumentWriter writer) throws IOException;

    /**
     * Public API - debugging utility
     * @param buffer the buffer to append debug data to
     */
    public void appendArgumentDebugStringTo(StringBuffer buffer) {
        buffer.append("(?)");
    }

    @Override public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("#method<").append(protocolMethodName()).append(">");
        this.appendArgumentDebugStringTo(sb);
        return sb.toString();
    }

    public Frame toFrame(int channelNumber) throws IOException {
        Frame frame = new Frame(AMQP.FRAME_METHOD, channelNumber);
        DataOutputStream bodyOut = frame.getOutputStream();
        bodyOut.writeShort(protocolClassId());
        bodyOut.writeShort(protocolMethodId());
        MethodArgumentWriter argWriter = new MethodArgumentWriter(bodyOut);
        writeArgumentsTo(argWriter);
        argWriter.flush();
        return frame;
    }

    public Method to08() {
        if (this instanceof AMQP.Connection.Close) {
            AMQP.Connection.Close close = (AMQP.Connection.Close) this;
            return new AMQImpl.Connection.Close08(close.getReplyCode(),
                                                  close.getReplyText(),
                                                  close.getClassId(),
                                                  close.getMethodId());
        }
        else if (this instanceof AMQP.Connection.CloseOk) {
            return new AMQImpl.Connection.Close08Ok();
        }
        else if (this instanceof AMQP.Basic.Consume) {
            AMQP.Basic.Consume consume = (AMQP.Basic.Consume) this;
            return new AMQImpl.Basic.Consume(consume.getDeprecatedTicket(),
                    consume.getQueue(),
                    consume.getConsumerTag(),
                    consume.getNoLocal(),
                    consume.getNoAck(),
                    consume.getExclusive(),
                    consume.getNowait(),
                    consume.getFilter()) {
                @Override
                public void writeArgumentsTo(MethodArgumentWriter writer) throws IOException {
                    writer.writeShort(this.deprecatedTicket);
                    writer.writeShortstr(this.queue);
                    writer.writeShortstr(this.consumerTag);
                    writer.writeBit(this.noLocal);
                    writer.writeBit(this.noAck);
                    writer.writeBit(this.exclusive);
                    writer.writeBit(this.nowait);
                    // Do not write filter
                }
            };
        }
        else {
            return this;
        }
    }

    public Method from08() {
        if (this instanceof AMQP.Connection.Close08) {
            AMQP.Connection.Close08 close08 = (AMQP.Connection.Close08) this;
            return new AMQImpl.Connection.Close(close08.getReplyCode(),
                                                close08.getReplyText(),
                                                close08.getClassId(),
                                                close08.getMethodId());
        }
        else if (this instanceof AMQP.Connection.Close08Ok) {
            return new AMQImpl.Connection.CloseOk();
        }
        else {
            return this;
        }
    }
}
